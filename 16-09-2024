#1405. Longest Happy String


class Solution {
    public String longestDiverseString(int a, int b, int c) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        if(a>0){
            pq.offer(new Pair(a,'a'));
        }
        if(b>0){
            pq.offer(new Pair(b,'b'));
        }
        if(c>0){
            pq.offer(new Pair(c,'c'));
        }

        StringBuilder result= new StringBuilder();

        while(!pq.isEmpty()){
            Pair curr = pq.poll();
            if(result.length()>=2 && result.charAt(result.length()-1)==curr.ch && 
            result.charAt(result.length()-2)==curr.ch){
                if(pq.isEmpty()){
                    break;
                }
                Pair next = pq.poll(); //get the new largest frquency char
                result.append(next.ch);
                next.count--;
                if(next.count>0){
                    pq.offer(next);
                }
                pq.offer(curr);  //puch the curr charcter back for the later use 
            }
            else{
                result.append(curr.ch);
                curr.count--;
                if(curr.count>0){
                    pq.offer(curr);
                }
            }

        }
        return result.toString();
        
    }
}
class Pair implements Comparable<Pair>{
    int count;
    char ch; 
    //construtor 
    Pair(int count, char ch){
        this.count = count;
        this.ch= ch;
    }
    @Override
    public  int compareTo(Pair other){
        return other.count - this.count; // for max heap 
    }
}
