#2406. Divide Intervals Into Minimum Number of Groups

class Solution {
    public int minGroups(int[][] intervals) {
        //sort intervals based on their starting points 
        Arrays.sort(intervals,(a,b) -> Integer.compare(a[0],b[0]));
        //priority queue(min-heap) to stored the end points of the groups 
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        for(int[] interval:intervals){
            int start = interval[0];
            int end = interval[1];
        // If the top of the queue (smallest end time) is smaller than the current start time
        // we can merge the interval into an existing group, so we pop the earliest end time
        if(!pq.isEmpty() && pq.peek()<start){
            pq.poll();
        }
        // Add the end point of the current interval to the group
            pq.add(end);

        }
        // The size of the priority queue represents the number of groups
        return pq.size();
    }
}

//T.C : O(nlogn)
//S.C : O(n)
